diff --git a/Readme.txt b/Readme.txt
index 91be5e0..c6b0795 100644
--- a/Readme.txt
+++ b/Readme.txt
@@ -1,36 +1,61 @@
-Project Assessment:
-	Cross-Solar is a backend web application created by a startup company called “Green Energy Analytics” in Texas - USA. This application collects energy analytics for solar panels every hour.
+﻿Project Assessment:
+	Cross-Solar is a backend web application created by a startup company called “Green Energy Analytics” in Texas - USA. 
+This application collects energy analytics for solar panels every hour.
 
 Notes:
-	- Project accepts data for registered panels only, and to register panel; serial number must be 16 characters length, and latitude/longitude contains 6 decimal places.
-	- Frontend application excluded from the current scope. It is a separate, fully-functioning application handled by another team, so we do not want to modify it.
+	- Project accepts data for registered panels only, and to register panel; 
+serial number must be 16 characters length, and latitude/longitude contains 6 decimal places.
+	- Frontend application excluded from the current scope. 
+It is a separate, fully-functioning application handled by another team, so we do not want to modify it.
 
+
 Tasks:
-	1)	Increase unit test coverage to reach 60%, achieving more than 60% will only consume your valuable time without extra score.
-	2)	Find bugs and fix them, hint: we provided Cross-Solar application in a good structure, so no need to spend your valuable time on structure modifications,  just focus on fixing bugs.
-	3) 	Frontend team wants to display panel’s all historical data in a chart, in which each point represents electricity generated by this panel each day [sum, min, max, average] up to the end of previous day , your goal is to implement backend part of this task, API specifications already there in code as agreed with Frontend team, and it is ok to implement this task without any optimization.
+	
+1)	Increase unit test coverage to reach 60%, achieving more than 60% will only consume your valuable time without extra score.
+	
+2)	Find bugs and fix them, hint: we provided Cross-Solar application in a good structure, so no need to spend your valuable time on structure modifications,  
+just focus on fixing bugs.
+	
+3) 	Frontend team wants to display panel’s all historical data in a chart, in which each point represents electricity generated 
+by this panel each day [sum, min, max, average] up to the end of previous day , your goal is to implement backend part of this task, API specifications already 
+there in code as agreed with Frontend team, and it is ok to implement this task without any optimization.
 
 Prerequisites:
-	Any IDE
+	
+Any IDE
 	Java 8
     MySQL 5.6+
 
 Development Environment:
   Mysql:
-    CrossSolar applications require MYSQL database to store its data. Make sure to update application.properties with spring.datasource.url(change hostname only), spring.datasource.username, and  spring.datasource.password. You are free to choose MySQl service in a cloud or installed on local machine or MySQL container.
+    CrossSolar applications require MYSQL database to store its data. 
+Make sure to update application.properties with spring.datasource.url(change hostname only), spring.datasource.username, and  spring.datasource.password. 
+You are free to choose MySQl service in a cloud or installed on local machine or MySQL container.
     
-  	CrossSolar application uses liquibase for Database changes. In case you need to update Database, please create a new changeset file in resources/db.changelog folder and include the newly created file in db.changelog-master.xml
-  	For more details on liquibase follow https://www.liquibase.org/documentation/changeset.html 
-  CrossSolar Application:
+  
+	CrossSolar application uses liquibase for Database changes. In case you need to update Database, please create a new changeset file in resources/db.changelog 
+folder and include the newly created file in db.changelog-master.xml
+  	
+For more details on liquibase follow https://www.liquibase.org/documentation/changeset.html 
+  
+CrossSolar Application:
     To start the application run CrossSolarApplication.java main method from your IDE.
 
 
 Production Environment:
-  This is how we are going to run and evaluate your submission, so please make sure to run below steps before submitting your answer.
+  
+This is how we are going to run and evaluate your submission, so please make sure to run below steps before submitting your answer.
 
-  1) Make sure to run unit tests,check code coverage, ensure application is compiling and all dependencies are included.
-  2) Commit everything using (git add --all && git commit -m "My submission")
-  3) Create patch file with name without spaces 'cross-solar-java_<YourNameHere>.patch', using the specified tag as the starting point (git format-patch initial-commit --stdout > cross-solar-java_<yournamehere>.patch)
-  4) Store your file in a shared location where Crossover team can access and download it for evaluation. and add your sharable link in the answer field of this question.
+  
+1) Make sure to run unit tests,check code coverage, ensure application is compiling and all dependencies are included.
+  
+2) Commit everything using (git add --all && git commit -m "My submission")
+  
+3) Create patch file with name without spaces 'cross-solar-java_<YourNameHere>.patch', 
+using the specified tag as the starting point (git format-patch initial-commit --stdout > 
+cross-solar-java_<yournamehere>.patch)
+  
+4) Store your file in a shared location where Crossover team can access and download it for evaluation. 
+and add your sharable link in the answer field of this question.
 
 
diff --git a/gradlew b/gradlew
old mode 100755
new mode 100644
diff --git a/src/main/java/com/crossover/techtrial/controller/PanelController.java b/src/main/java/com/crossover/techtrial/controller/PanelController.java
index d308f18..65ae151 100644
--- a/src/main/java/com/crossover/techtrial/controller/PanelController.java
+++ b/src/main/java/com/crossover/techtrial/controller/PanelController.java
@@ -1,12 +1,10 @@
 package com.crossover.techtrial.controller;
 
-import com.crossover.techtrial.dto.DailyElectricity;
-import com.crossover.techtrial.model.HourlyElectricity;
-import com.crossover.techtrial.model.Panel;
-import com.crossover.techtrial.service.HourlyElectricityService;
-import com.crossover.techtrial.service.PanelService;
-import java.util.ArrayList;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
 import java.util.List;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
@@ -17,6 +15,12 @@
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RestController;
+
+import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.service.HourlyElectricityService;
+import com.crossover.techtrial.service.PanelService;
 
 /**
  * Panel Controller for all Rest APIs related to Panel.
@@ -64,7 +68,7 @@
   
   @GetMapping(path = "/api/panels/{panel-serial}/hourly")
   public ResponseEntity<?> hourlyElectricity(
-      @PathVariable(value = "banel-serial") String panelSerial,
+      @PathVariable(value = "panel-serial") String panelSerial,
       @PageableDefault(size = 5,value = 0) Pageable pageable) {
     Panel panel = panelService.findBySerial(panelSerial);
     if (panel == null) {
@@ -85,11 +89,20 @@
   @GetMapping(path = "/api/panels/{panel-serial}/daily")
   public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
       @PathVariable(value = "panel-serial") String panelSerial) {
-    List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
     /**
      * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
      * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
      */
+    
+    Panel panel = panelService.findBySerial(panelSerial);
+    if (panel == null) {
+      return ResponseEntity.notFound().build(); 
+    }
+
+    LocalDateTime dateTo = LocalDate.now().minusDays(1).atTime(LocalTime.MAX); // end of previous day
+    List<DailyElectricity> dailyElectricityForPanel = hourlyElectricityService.getAllDailyElectricityByPanel(panel.getId(), dateTo);
+    
     return ResponseEntity.ok(dailyElectricityForPanel);
   }
+  
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
index b0e0ea9..2b6146d 100644
--- a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
+++ b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
@@ -2,6 +2,7 @@
 
 import java.io.Serializable;
 import java.time.LocalDate;
+import java.time.LocalDateTime;
 
 /**
  * DailyElectricity class will hold sum, average,minimum and maximum electricity for a given day.
@@ -21,6 +22,16 @@
   
   private Long min;
   
+  public DailyElectricity(LocalDateTime date, Long sum, Double average, Long min, Long max) {
+	super();
+	this.date = date.toLocalDate();
+	this.sum = sum;
+	this.average = average;
+	this.min = min;
+	this.max = max;
+  }
+
+
   private Long max;
 
   public LocalDate getDate() {
diff --git a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
old mode 100755
new mode 100644
diff --git a/src/main/java/com/crossover/techtrial/model/Panel.java b/src/main/java/com/crossover/techtrial/model/Panel.java
index 34fb762..af3ef40 100644
--- a/src/main/java/com/crossover/techtrial/model/Panel.java
+++ b/src/main/java/com/crossover/techtrial/model/Panel.java
@@ -20,128 +20,146 @@
 @Table(name = "panel")
 public class Panel implements Serializable {
 
-  private static final long serialVersionUID = -8527695980909864257L;
+	private static final long serialVersionUID = -8527695980909864257L;
 
-  @Id
-  @GeneratedValue(strategy = GenerationType.IDENTITY)
-  Long id;
+	@Id
+	@GeneratedValue(strategy = GenerationType.IDENTITY)
+	Long id;
 
-  @NotNull
-  @Column(name = "serial")
-  String serial;
+	@NotNull
+	@Column(name = "serial")
+	String serial;
 
-  @Column(name = "longitude")
-  Double longitude;
+	@Column(name = "longitude")
+	Double longitude;
 
-  @Column(name = "latitude")
-  Double latitude;
+	@Column(name = "latitude")
+	Double latitude;
 
-  @Nullable
-  @Column(name = "brand")
-  String brand;
+	@Nullable
+	@Column(name = "brand")
+	String brand;
 
-  public Long getId() {
-    return id;
-  }
+	
+	
+	public Panel() {
+		super();
+	}
 
-  public void setId(Long id) {
-    this.id = id;
-  }
+	public Panel(String serial, double longitude, double latitude, String brand) {
+		super();
+		this.serial = serial;
+		this.longitude = longitude;
+		this.latitude = latitude;
+		this.brand = brand;
+	}
 
-  public String getSerial() {
-    return serial;
-  }
+	public Long getId() {
+		return id;
+	}
 
-  public void setSerial(String serial) {
-    this.serial = serial;
-  }
+	public void setId(Long id) {
+		this.id = id;
+	}
 
-  public Double getLongitude() {
-    return longitude;
-  }
+	public String getSerial() {
+		return serial;
+	}
 
-  public void setLongitude(Double longitude) {
-    this.longitude = longitude;
-  }
+	public void setSerial(String serial) {
+		this.serial = serial;
+	}
 
-  public Double getLatitude() {
-    return latitude;
-  }
+	public Double getLongitude() {
+		return longitude;
+	}
 
-  public void setLatitude(Double latitude) {
-    this.latitude = latitude;
-  }
+	public void setLongitude(Double longitude) {
+		this.longitude = longitude;
+	}
 
-  public String getBrand() {
-    return brand;
-  }
+	public Double getLatitude() {
+		return latitude;
+	}
 
-  public void setBrand(String brand) {
-    this.brand = brand;
-  }
+	public void setLatitude(Double latitude) {
+		this.latitude = latitude;
+	}
 
-  /*
-   * Id, Serial and Brand are only fields required to uniquely identify a Panel
-   * 
-   * @see java.lang.Object#hashCode()
-   */
-  @Override
-  public int hashCode() {
-    final int prime = 31;
-    int result = 1;
-    result = prime * result + ((brand == null) ? 0 : brand.hashCode());
-    result = prime * result + ((id == null) ? 0 : id.hashCode());
-    result = prime * result + ((serial == null) ? 0 : serial.hashCode());
-    return result;
-  }
+	public String getBrand() {
+		return brand;
+	}
 
-  /*
-   * Id, Serial and Brand are only fields required to uniquely identify a Panel
-   * 
-   * @see java.lang.Object#equals(java.lang.Object)
-   */
-  @Override
-  public boolean equals(Object obj) {
-    if (this == obj) {
-      return true;
-    }
-    if (obj == null) {
-      return false;
-    }
-    if (getClass() != obj.getClass()) {
-      return false;
-    }
-    Panel other = (Panel) obj;
-    if (brand == null) {
-      if (other.brand != null) {
-        return false;
-      }
-    } else if (!brand.equals(other.brand)) {
-      return false;
-    }
-    if (id == null) {
-      if (other.id != null) {
-        return false;
-      }
-    } else if (!id.equals(other.id)) {
-      return false;
-    }
-    if (serial == null) {
-      if (other.serial != null) {
-        return false;
-      }
-    } else if (!serial.equals(other.serial)) {
-      return false;
-    }
-    return true;
-  }
+	public void setBrand(String brand) {
+		this.brand = brand;
+	}
 
-  /* (non-Javadoc)
-   * @see java.lang.Object#toString()
-   */
-  @Override
-  public String toString() {
-    return "Panel [id=" + id + ", serial=" + serial + ", longitude=" + longitude + ", latitude="
-        + latitude + ", brand=" + brand + "]";
-  }
+	/*
+	 * Id, Serial and Brand are only fields required to uniquely identify a
+	 * Panel
+	 * 
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((brand == null) ? 0 : brand.hashCode());
+		result = prime * result + ((id == null) ? 0 : id.hashCode());
+		result = prime * result + ((serial == null) ? 0 : serial.hashCode());
+		return result;
+	}
+
+	/*
+	 * Id, Serial and Brand are only fields required to uniquely identify a
+	 * Panel
+	 * 
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj) {
+			return true;
+		}
+		if (obj == null) {
+			return false;
+		}
+		if (getClass() != obj.getClass()) {
+			return false;
+		}
+		Panel other = (Panel) obj;
+		if (brand == null) {
+			if (other.brand != null) {
+				return false;
+			}
+		} else if (!brand.equals(other.brand)) {
+			return false;
+		}
+		if (id == null) {
+			if (other.id != null) {
+				return false;
+			}
+		} else if (!id.equals(other.id)) {
+			return false;
+		}
+		if (serial == null) {
+			if (other.serial != null) {
+				return false;
+			}
+		} else if (!serial.equals(other.serial)) {
+			return false;
+		}
+		return true;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "Panel [id=" + id + ", serial=" + serial + ", longitude=" + longitude + ", latitude=" + latitude
+				+ ", brand=" + brand + "]";
+	}
 }
diff --git a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
index b883493..6472b94 100644
--- a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
@@ -1,17 +1,36 @@
 package com.crossover.techtrial.repository;
 
-import com.crossover.techtrial.model.HourlyElectricity;
+import java.time.LocalDateTime;
+import java.util.List;
+
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
+import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.PagingAndSortingRepository;
 import org.springframework.data.rest.core.annotation.RestResource;
+
+import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
 
 /**
  * HourlyElectricity Repository is for all operations for HourlyElectricity.
  * @author Crossover
  */
 @RestResource(exported = false)
-public interface HourlyElectricityRepository 
-    extends PagingAndSortingRepository<HourlyElectricity,Long> {
+public interface HourlyElectricityRepository  extends PagingAndSortingRepository<HourlyElectricity,Long> {
   Page<HourlyElectricity> findAllByPanelIdOrderByReadingAtDesc(Long panelId,Pageable pageable);
+  
+  /**
+   * Find all daily electricity by panel.
+   *
+   * @param panelId the panel id
+   * @param dateTo the date to
+   * @return the list
+   */
+  @Query("select NEW com.crossover.techtrial.dto.DailyElectricity(readingAt, SUM(generatedElectricity), AVG(generatedElectricity), MIN(generatedElectricity), MAX(generatedElectricity)) "
+  		+ "from HourlyElectricity "
+  		+ "where panel.id = ?1 and readingAt <= ?2 "
+  		+ "group by readingAt "
+  		+ "order by readingAt")
+  List<DailyElectricity> findAllDailyElectricityByPanel(Long panelId, LocalDateTime dateTo);
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
index 70c40b7..675e218 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
@@ -1,8 +1,13 @@
 package com.crossover.techtrial.service;
 
-import com.crossover.techtrial.model.HourlyElectricity;
+import java.time.LocalDateTime;
+import java.util.List;
+
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
+
+import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
 
 /**
  * HourlyElectricityService interface for all services realted to HourlyElectricity.
@@ -13,4 +18,13 @@
   HourlyElectricity save(HourlyElectricity hourlyElectricity);
   
   Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable);
+  
+  /**
+   * Find panel avg generated electricity.
+   *
+   * @param panelId the panel id
+   * @param dateTo the date up to 
+   * @return the daily electricity
+   */
+  List<DailyElectricity> getAllDailyElectricityByPanel(Long panelId, LocalDateTime dateTo);
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
index 6634e49..668fbe3 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
@@ -1,12 +1,16 @@
 package com.crossover.techtrial.service;
 
-import com.crossover.techtrial.model.HourlyElectricity;
-import com.crossover.techtrial.repository.HourlyElectricityRepository;
+import java.time.LocalDateTime;
+import java.util.List;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.stereotype.Service;
+
+import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.repository.HourlyElectricityRepository;
 
 /**
  * HourlyElectricityServiceImpl will handle electricity generated by a Panel.
@@ -27,5 +31,13 @@
   public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
     return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
   }
+
+	/* (non-Javadoc)
+	 * @see com.crossover.techtrial.service.HourlyElectricityService#findPanelAvgGeneratedElectricity(java.lang.Long, java.time.LocalDateTime, java.time.LocalDateTime)
+	 */
+	@Override
+	public List<DailyElectricity> getAllDailyElectricityByPanel(Long panelId, LocalDateTime dateTo) {
+		return hourlyElectricityRepository.findAllDailyElectricityByPanel(panelId, dateTo);
+	}
   
 }
\ No newline at end of file
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index c7cc890..5d05b73 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -2,7 +2,7 @@
 #Database connection Parameters
 spring.datasource.url: jdbc:mysql://localhost:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false
 spring.datasource.username=root
-spring.datasource.password=
+spring.datasource.password=root
 spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 
 spring.jpa.hibernate.ddl-auto=none
diff --git a/src/main/resources/db/changelog/db.changelog-1.0.xml b/src/main/resources/db/changelog/db.changelog-1.0.xml
old mode 100755
new mode 100644
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
old mode 100755
new mode 100644
diff --git a/src/test/java/com/crossover/techtrial/CrossSolarApplicationTests.java b/src/test/java/com/crossover/techtrial/CrossSolarApplicationTests.java
index 840d943..41205dc 100644
--- a/src/test/java/com/crossover/techtrial/CrossSolarApplicationTests.java
+++ b/src/test/java/com/crossover/techtrial/CrossSolarApplicationTests.java
@@ -1,17 +1,24 @@
 package com.crossover.techtrial;
 
+import static org.assertj.core.api.Assertions.assertThat;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
+
+import com.crossover.techtrial.controller.PanelController;
 
 @RunWith(SpringRunner.class)
 @SpringBootTest
 public class CrossSolarApplicationTests {
 
-  @Test
-  public void contextLoads() {
-    
-  }
+	@Autowired
+	private PanelController controller;
+
+	@Test
+	public void contextLoads() {
+		assertThat(controller).isNotNull();
+	}
 
 }
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
index a1deacf..6590bf1 100644
--- a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
@@ -1,28 +1,42 @@
 package com.crossover.techtrial.controller;
 
-import com.crossover.techtrial.model.Panel;
+import java.time.LocalDateTime;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+
+import javax.servlet.http.HttpServletResponse;
+
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Mock;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.test.web.client.TestRestTemplate;
+import org.springframework.core.ParameterizedTypeReference;
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpHeaders;
+import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
-import org.springframework.test.web.servlet.MockMvc;
 
-import org.springframework.test.web.servlet.setup.MockMvcBuilders;
-
+import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.PanelRepository;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
+import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
 
 /**
  * PanelControllerTest class will test all APIs in PanelController.java.
- * @author Crossover
+ * 
+ * @author Guzman
  *
  */
 
@@ -30,32 +44,83 @@
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
 public class PanelControllerTest {
   
-  MockMvc mockMvc;
-  
-  @Mock
-  private PanelController panelController;
-  
+  @Autowired
+  private PanelRepository panelRepostitory;
+
   @Autowired
   private TestRestTemplate template;
 
+  ObjectMapper mapper = new ObjectMapper()
+      .registerModule(new ParameterNamesModule())
+      .registerModule(new Jdk8Module()).registerModule(new JavaTimeModule());
+  
+  private Panel panel;
+  
   @Before
-  public void setup() throws Exception {
-    mockMvc = MockMvcBuilders.standaloneSetup(panelController).build();
+  public void setup() throws Exception { 
+    long id = new Random().nextInt((int)panelRepostitory.count());
+    if (id > 0) {
+       String serial = panelRepostitory.findById(id).get().getSerial();
+       panel = panelRepostitory.findBySerial(serial);
+    }
+  }
+  
+  @Test
+  public void testPanelShouldBeRegistered() throws Exception {
+
+    Integer rand = new Random().nextInt();
+    String serial = String.valueOf(rand < 0 ? rand*-1 : rand);
+    
+    Panel panel = new Panel(serial, 54.123232, 54.123232, "B" + serial);
+    String body = mapper.writeValueAsString(panel);
+    HttpEntity<Object> request = getHttpEntity(body);
+
+    ResponseEntity<Panel> response = template.postForEntity("/api/register",
+        request, Panel.class);
+    Assert.assertEquals(202, response.getStatusCode().value());
   }
 
   @Test
-  public void testPanelShouldBeRegistered() throws Exception {
-    HttpEntity<Object> panel = getHttpEntity(
-        "{\"serial\": \"232323\", \"longitude\": \"54.123232\"," 
-            + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
-    ResponseEntity<Panel> response = template.postForEntity(
-        "/api/register", panel, Panel.class);
-    Assert.assertEquals(202,response.getStatusCode().value());
+  public void testSaveHourlyElectricity() throws Exception {
+
+    HourlyElectricity electricity = new HourlyElectricity();
+    electricity.setPanel(panel);
+    electricity.setGeneratedElectricity(10L);
+    electricity.setReadingAt(LocalDateTime.now());
+
+    String body = mapper.writeValueAsString(electricity);
+    HttpEntity<Object> request = getHttpEntity(body);
+
+    Map<String, String> pElectricity = new HashMap<>();
+    pElectricity.put("serial", panel.getSerial());
+    ResponseEntity<HourlyElectricity> response = template.postForEntity(
+        "/api/panels/{serial}/hourly", request, HourlyElectricity.class,
+        pElectricity);
+
+    Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusCode().value());
+  }
+
+  @Test
+  public void testAllDailyElectricityFromYesterday() throws Exception {
+    
+    Map<String, String> pElectricity = new HashMap<>();
+    pElectricity.put("serial", panel.getSerial());
+
+    ResponseEntity<List<DailyElectricity>> response = template.exchange(
+        "/api/panels/{serial}/daily", HttpMethod.GET, null,
+        new ParameterizedTypeReference<List<DailyElectricity>>() {
+        }, pElectricity);
+
+    List<DailyElectricity> lista = response.getBody();
+
+    Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusCode().value());
   }
 
   private HttpEntity<Object> getHttpEntity(Object body) {
+
     HttpHeaders headers = new HttpHeaders();
     headers.setContentType(MediaType.APPLICATION_JSON);
     return new HttpEntity<Object>(body, headers);
+
   }
 }
diff --git a/src/test/java/com/crossover/techtrial/model/HourlyElectricityTest.java b/src/test/java/com/crossover/techtrial/model/HourlyElectricityTest.java
new file mode 100644
index 0000000..6daf1a8
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/model/HourlyElectricityTest.java
@@ -0,0 +1,42 @@
+package com.crossover.techtrial.model;
+
+import static org.junit.Assert.assertTrue;
+
+import java.time.LocalDateTime;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+
+/**
+ * HourlyElectricityTest class will test all APIs in HourlyElectricity.java.
+ * 
+ * @author Guzman
+ *
+ */
+
+@RunWith(SpringJUnit4ClassRunner.class)
+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
+public class HourlyElectricityTest {
+  
+  @Test
+  public void testEqualsAndHashCode() {
+    
+    Panel panel = new Panel("4321", 43.11, 22.11, "guzman");
+
+    HourlyElectricity electricity1 = new HourlyElectricity();
+    electricity1.setPanel(panel);
+    electricity1.setGeneratedElectricity(Long.MAX_VALUE);
+    electricity1.setReadingAt(LocalDateTime.MAX);
+    
+    HourlyElectricity electricity2 = new HourlyElectricity();
+    electricity2.setPanel(panel);
+    electricity2.setGeneratedElectricity(Long.MAX_VALUE);
+    electricity2.setReadingAt(LocalDateTime.MAX);
+    
+    assertTrue(electricity1.equals(electricity2) && electricity2.equals(electricity1));
+    assertTrue(electricity1.hashCode() == electricity2.hashCode());
+  }
+}
diff --git a/src/test/java/com/crossover/techtrial/model/PanelTest.java b/src/test/java/com/crossover/techtrial/model/PanelTest.java
new file mode 100644
index 0000000..cc2c09d
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/model/PanelTest.java
@@ -0,0 +1,29 @@
+package com.crossover.techtrial.model;
+
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+
+/**
+ * PanelTest class will test all APIs in Panel.java.
+ * 
+ * @author Guzman
+ *
+ */
+
+@RunWith(SpringJUnit4ClassRunner.class)
+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
+public class PanelTest {
+  
+  @Test
+  public void testEqualsAndHashCode() {
+    Panel panel1 = new Panel("12345", 45.555, 123.10, "guzman");
+    Panel panel2 = new Panel("12345", 45.555, 123.10, "guzman");
+    assertTrue(panel1.equals(panel2) && panel2.equals(panel1));
+    assertTrue(panel1.hashCode() == panel2.hashCode());
+  }
+}
